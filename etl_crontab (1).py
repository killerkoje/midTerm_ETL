# -*- coding: utf-8 -*-
"""ETL_CRONTAB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17H-wvhUTxM6pTtlQ9eEToyPqCsrviD2u
"""



import pandas as pd
from datetime import datetime
from sqlalchemy import create_engine

# 데이터베이스 접속 정보 (이전과 동일)
user = 'kopouser'
password = '1234'
host = '유동 AWS IP주소입력'
port = 3306
database = 'kopo'

# MySQL 연결 문자열 생성 (SQLAlchemy 사용)
db_connection_str = f'mysql+mysqlconnector://{user}:{password}@{host}:{port}/{database}'
engine = create_engine(db_connection_str)

# 저장할 테이블 이름
output_table_name = "economic_monthly"

# 모든 월별 데이터를 저장할 빈 리스트
all_monthly_dfs = []

# 현재 월 가져오기
now = datetime.now()
current_month = now.month

# 현재 월의 데이터를 가져와서 저장
try:
    query = f"""
    SELECT
        now() AS time_tag,
        a.transaction_date,
        a.amount,
        a.transaction_type,
        b.account_type,
        b.open_date,
        b.balance,
        {current_month} AS month_value
    FROM (
        SELECT *
        FROM transaction_output
        WHERE MONTH(transaction_date) = {current_month}
    ) a
    INNER JOIN account_output b
    ON a.account_id = b.account_id;
    """
    monthly_df = pd.read_sql(query, engine)
    all_monthly_dfs.append(monthly_df)
    print(f"Month {current_month} 데이터 DataFrame 생성 완료.")

    # 모든 월별 DataFrame을 하나로 합치기 (현재는 현재 월 데이터만 있으므로 바로 저장)
    final_df = pd.concat(all_monthly_dfs, ignore_index=True)

    # DataFrame을 MySQL 테이블로 저장
    final_df.to_sql(name=output_table_name, con=engine, if_exists='append', index=False)
    print(f"\nDataFrame을 MySQL 테이블 '{output_table_name}'로 저장 완료 (데이터 누적).")

except Exception as e:
    print(f"Error: {e}")

finally:
    if 'engine' in locals(): # engine이 생성되었는지 확인
        engine.dispose()
    print("DB 연결 종료.")